import math
import random

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # Represents the 3x3 board
        self.current_player = 'X'
        self.winning_combos = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            [0, 4, 8], [2, 4, 6]              # Diagonals
        ]

    def print_board(self):
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')
        print('')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        return ' ' in self.board

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square):
        if self.board[square] == ' ':
            self.board[square] = self.current_player
            self.current_player = 'O' if self.current_player == 'X' else 'X'

    def check_winner(self, player):
        for combo in self.winning_combos:
            if all(self.board[i] == player for i in combo):
                return True
        return False

    def minimax(self, depth, player):
        if player == 'X':  # AI player maximizing
            best = {'position': -1, 'score': -math.inf}
        else:  # Human player minimizing
            best = {'position': -1, 'score': math.inf}

        if depth == 0 or not self.empty_squares():
            score = 0
            if self.check_winner('X'):
                score = 1
            elif self.check_winner('O'):
                score = -1
            return {'position': -1, 'score': score}

        for move in self.available_moves():
            self.make_move(move)
            sim_score = self.minimax(depth - 1, 'O' if player == 'X' else 'X')
            self.board[move] = ' '
            sim_score['position'] = move

            if player == 'X':
                if sim_score['score'] > best['score']:
                    best = sim_score
            else:
                if sim_score['score'] < best['score']:
                    best = sim_score

        return best

    def ai_move(self):
        if self.num_empty_squares() == 9:
            return random.choice(self.available_moves())
        else:
            return self.minimax(self.num_empty_squares(), 'X')['position']

def play_game():
    game = TicTacToe()
    print("Welcome to Tic-Tac-Toe!")
    game.print_board()

    while game.empty_squares():
        if game.current_player == 'X':  # AI's turn
            move = game.ai_move()
            game.make_move(move)
            print(f"AI makes move to square {move}")
        else:  # Human's turn
            try:
                move = int(input("Your move (0-8): "))
                if move < 0 or move > 8 or game.board[move] != ' ':
                    raise ValueError
            except ValueError:
                print("Invalid move. Try again.")
                continue
            game.make_move(move)

        game.print_board()

        if game.check_winner('X'):
            print("AI wins!")
            break
        elif game.check_winner('O'):
            print("You win!")
            break
    else:
        print("It's a tie!")

if __name__ == '__main__':
    play_game()
